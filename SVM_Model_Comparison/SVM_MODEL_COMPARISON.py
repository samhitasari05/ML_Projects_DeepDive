# -*- coding: utf-8 -*-
"""AIT_636_Assignment7B_SVM.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XwNbt2tuv5G2uhR8vbBMwX4AI78D4DWM
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn import tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Loading the dataset
dataset = pd.read_csv('/content/drive/My Drive/AIT_636_3rd sem/pima-indians-diabetes.csv', index_col=0)

# Extracting the features and target
features = dataset.columns[:-1]
X_data = dataset.drop('target', axis=1)
y_data = dataset['target']

# Standardize the features data
scaler = StandardScaler()
X_scaled_data = scaler.fit_transform(X_data)

# Splitting the dataset into training and test sets
X_train_set, X_test_set, y_train_set, y_test_set = train_test_split(
    X_scaled_data, y_data, test_size=0.3, stratify=y_data, random_state=42
)

# Define hyperparameters and kernels for the SVM
kernels_used = ['linear', 'poly', 'rbf', 'sigmoid']
C_range = np.arange(0.5, 2.5, 0.5)
degree_range = range(2, 5)

# Dictionary to store results for plotting
svm_results = {kernel: [] for kernel in kernels_used}
svm_results.update({f'poly_{deg}': [] for deg in degree_range})

# Training and evaluating SVM models with different hyperparameters
for kernel in kernels_used:
    for C_value in C_range:
        if kernel == 'poly':
            for degree in degree_range:
                svm_model = SVC(C=C_value, kernel=kernel, degree=degree)
                acc = cross_val_score(svm_model, X_scaled_data, y_data, cv=10, scoring='accuracy').mean()
                prec = cross_val_score(svm_model, X_scaled_data, y_data, cv=10, scoring='precision').mean()
                rec = cross_val_score(svm_model, X_scaled_data, y_data, cv=10, scoring='recall').mean()
                f1 = cross_val_score(svm_model, X_scaled_data, y_data, cv=10, scoring='f1').mean()

                svm_results[f'poly_{degree}'].append(acc)
                print(f"Kernel: {kernel}, Degree: {degree}, C: {C_value}, "
                      f"Accuracy: {acc:.4f}, Precision: {prec:.4f}, "
                      f"Recall: {rec:.4f}, F1-Score: {f1:.4f}")

        else:
            svm_model = SVC(C=C_value, kernel=kernel)
            acc = cross_val_score(svm_model, X_scaled_data, y_data, cv=10, scoring='accuracy').mean()
            prec = cross_val_score(svm_model, X_scaled_data, y_data, cv=10, scoring='precision').mean()
            rec = cross_val_score(svm_model, X_scaled_data, y_data, cv=10, scoring='recall').mean()
            f1 = cross_val_score(svm_model, X_scaled_data, y_data, cv=10, scoring='f1').mean()

            svm_results[kernel].append(acc)
            print(f"Kernel: {kernel}, C: {C_value}, Accuracy: {acc:.4f}, "
                  f"Precision: {prec:.4f}, Recall: {rec:.4f}, F1-Score: {f1:.4f}")

# Plotting the accuracy vs. C-values for each kernel
plt.figure(figsize=(10, 6))
for kernel, accuracies in svm_results.items():
    if len(accuracies) == len(C_range):
        plt.plot(C_range, accuracies, label=kernel, marker='o', linestyle='--',
                 markerfacecolor='red', markersize=8)

plt.title('Accuracy vs. C-Values')
plt.xlabel('C-Value')
plt.ylabel('Accuracy')
plt.legend(loc='best')
plt.show()

# Training Random Forest Classifier
rf_model = RandomForestClassifier(
    max_depth=None,
    min_samples_split=7,
    min_samples_leaf=2,
    n_estimators=100
)
rf_model = rf_model.fit(X_train_set, y_train_set)

# Producing visualizations of the Random Forest tree
class_labels = list(map(str, rf_model.classes_))
plt.figure(figsize=(16, 8))
tree.plot_tree(
    rf_model.estimators_[0],  # Visualizing the first tree from the forest
    max_depth=3,
    feature_names=features,
    class_names=class_labels,
    filled=True
)
plt.show()